---
import GeneratorTextInput from "../components/GeneratorTextInput.astro";
import Layout from "../layouts/Layout.astro";
import GeneratorColumn from "../components/GeneratorColumn.astro";
import GeneratorWrapper from "../components/GeneratorWrapper.astro";
import GeneratorDropZone from "../components/GeneratorDropZone.astro";
import GeneratorTextArea from "../components/GeneratorTextArea.astro";
import GeneratorSelectMenu from "../components/GeneratorSelectMenu.astro";
import { ModLoader } from "../../../shared/types/ModLoader";
import { compareAlphabeticallyAscInsensitive } from "../../../shared/comparisonFunctions";
---

<Layout title="Mod JSON Generator" linkHome={true}>
  <GeneratorWrapper>
    <GeneratorColumn>
      <GeneratorTextInput id="modName" placeholder="The name of the mod">
        Mod Name
      </GeneratorTextInput>
      <GeneratorTextInput id="modId" placeholder="The ID of the mod">
        Mod ID
      </GeneratorTextInput>
      <GeneratorTextInput id="modCreators" placeholder="Who made this mod?">
        Mod Creator(s)
      </GeneratorTextInput>
      <GeneratorTextInput id="modVersion" placeholder="The mod version">
        Mod Version
      </GeneratorTextInput>
      <GeneratorTextArea
        id="modDescription"
        placeholder="A description of what the mod does"
        rows={10}
      >
        Mod Description
      </GeneratorTextArea>
      <GeneratorTextInput
        id="targetGameVersion"
        placeholder="The version of the game the mod is made for"
      >
        Game Version
      </GeneratorTextInput>
      <GeneratorSelectMenu
        id="modLoader"
        values={Object.keys(ModLoader)
          .sort(compareAlphabeticallyAscInsensitive)
          .map((k) => [k, k, k == ModLoader.Scotland2])}
      >
        Mod Loader
      </GeneratorSelectMenu>
      <GeneratorDropZone id="loadQmod">
        Drag/drop .qmod file here, or click to select file.
      </GeneratorDropZone>
    </GeneratorColumn>
    <GeneratorColumn>
      <GeneratorTextInput
        id="modDownloadLink"
        placeholder="A direct link to the .qmod file"
      >
        Download Link
      </GeneratorTextInput>

      <GeneratorTextInput
        id="modSourceLink"
        placeholder="A link to the source code for the mod"
      >
        Source Code
      </GeneratorTextInput>

      <GeneratorTextInput
        id="authorIcon"
        placeholder="URL to a square image file."
      >
        Author Icon URL
      </GeneratorTextInput>

      <GeneratorTextInput
        id="modWebsiteLink"
        placeholder="A link to a website for the mod."
      >
        Website
      </GeneratorTextInput>

      <GeneratorTextInput
        id="modFundingLink"
        placeholder="A link to a page where people can donate some money."
      >
        Funding
      </GeneratorTextInput>

      <GeneratorTextInput
        id="modCover"
        placeholder="A direct link to a cover image."
      >
        Cover link
      </GeneratorTextInput>

      <button
        class={`
          btn
          btn-primary
          btn
          rounded-lg
          text-white
          mt-4
          w-full
        `}
        id="generateJson"
        type="button"
        data-repo={(import.meta as any).env.GITHUB_REPOSITORY}
        data-branch={(import.meta as any).env.REPO_BRANCH}
      >
        Create JSON on GitHub
      </button>
    </GeneratorColumn>
  </GeneratorWrapper>
</Layout>
<script>
  import JSZip from "jszip";
  import { sanitizeFilename } from "../../../shared/sanitizeFilename";
  import { splitModKeys, type Mod } from "../../../shared/types/Mod";
  import type { ModsCollection } from "../../../shared/types/ModsCollection";
  import type { QmodInfo } from "../../../shared/types/QmodInfo";
  import { fetchJson } from "../../../shared/fetch";
  import { ghRegex } from "../../../shared/ghRegex";
  import { getStandardizedMod } from "../../../shared/getStandardizedMod";
  import { getGithubIconUrl } from "../../../shared/getGithubIconUrl";
  import { getQmodCoverUrl } from "../../../shared/getQmodCoverUrl";
  import { isNullOrWhitespace } from "../../../shared/isNullOrWhitespace";
  import { validateMod } from "../../../shared/validateMod";
  import { ModLoader } from "../../../shared/types/ModLoader";

  ("use strict");
  (async () => {
    function getElementById(id) {
      return document.getElementById(id);
    }
    /**
     * Regular expression for matching GitHub repository URLs.
     */
    const modNameElement = getElementById("modName") as HTMLInputElement,
      modDescriptionElement = getElementById(
        "modDescription"
      ) as HTMLTextAreaElement,
      modIdElement = getElementById("modId") as HTMLInputElement,
      loadQmodElement = getElementById("loadQmod") as HTMLInputElement,
      modDownloadLinkElement = getElementById(
        "modDownloadLink"
      ) as HTMLInputElement,
      modSourceLinkElement = getElementById(
        "modSourceLink"
      ) as HTMLInputElement,
      modWebsiteLinkElement = getElementById(
        "modWebsiteLink"
      ) as HTMLInputElement,
      modFundingLinkElement = getElementById(
        "modFundingLink"
      ) as HTMLInputElement,
      modCoverElement = getElementById("modCover") as HTMLInputElement,
      modCreatorsElement = getElementById("modCreators") as HTMLInputElement,
      authorIconElement = getElementById("authorIcon") as HTMLInputElement,
      modVersionElement = getElementById("modVersion") as HTMLInputElement,
      targetGameVersionElement = getElementById(
        "targetGameVersion"
      ) as HTMLInputElement,
      modLoaderElement = getElementById("modLoader") as HTMLSelectElement,
      qmodDropZoneElement = document.body,
      generateButtonElement = getElementById("generateJson");

    if (
      !modNameElement ||
      !modDescriptionElement ||
      !modIdElement ||
      !loadQmodElement ||
      !modDownloadLinkElement ||
      !modSourceLinkElement ||
      !modWebsiteLinkElement ||
      !modFundingLinkElement ||
      !modCoverElement ||
      !modCreatorsElement ||
      !authorIconElement ||
      !modVersionElement ||
      !targetGameVersionElement ||
      !modLoaderElement ||
      !qmodDropZoneElement ||
      !generateButtonElement
    ) {
      throw new Error();
    }

    let modJson: ModsCollection = {};

    // Load the mod.json file
    (async function loadModJson() {
      try {
        const result = await fetchJson<ModsCollection>(
          `mods.json?${Math.floor(Date.now() / 1000)}`
        );

        if (result.data) {
          modJson = result.data;
        }
      } catch (error) {}
    })();

    /**
     * Gets the intended filename for the given mod values.
     * @param id The mod ID.
     * @param version The mod version.
     * @param gameVersion The game version.
     * @returns
     */
    function getFilename(id: string, version: string, gameVersion: string) {
      return `mods/${sanitizeFilename(gameVersion.trim())}/${sanitizeFilename(`${id.trim()}-${version.trim()}.json`)}`;
    }

    /**
     * Checks if a mod with the given id and version already exists for the specified game version.
     *
     * @param id The ID of the mod.
     * @param version The version of the mod.
     * @param gameVersion The version of the game.
     * @returns Returns true if the mod with the given id and version exists for the specified game version, false otherwise.
     */
    function checkMod(
      id: string,
      version: string,
      gameVersion: string
    ): boolean {
      /**
       * Array of mods for the specified game version.
       * @type {Mod[]|null}
       */
      const versionMods = modJson[gameVersion];

      if (versionMods == null) {
        return false;
      }

      // Loop through all mods for the specified game version
      for (const mod of versionMods) {
        // Check if mod id and version match the given id and version
        if (mod.id == id && mod.version == version) {
          return true;
        }
      }

      return false;
    }

    function readQmodFile(file) {
      const reader = new FileReader();

      console.log(`â€¦ ${file.name}`);

      reader.onloadend = qmodLoadHandler;
      reader.readAsArrayBuffer(file);
    }

    /**
     * Creates a temporary file input element and clicks it to select a .qmod file and load its information.
     * @param e
     */
    function loadQmod(e: MouseEvent) {
      /**
       * @type {HTMLInputElement}
       */
      const input = document.createElement("input") as HTMLInputElement;

      input.setAttribute("type", "file");
      input.addEventListener("change", function (e) {
        if (!this.files) {
          return;
        }

        if (!this.files[0]) {
          return;
        }

        readQmodFile(this.files[0]);
      });
      input.click();
    }

    /**
     * Generates JSON for the mod, and opens a GitHub page with a new file pre-populated with it, or the existing file if it already exists.
     */
    function generateJson(this: HTMLElement, e: Event) {
      try {
        const repo = this.getAttribute("data-repo");
        const branch = this.getAttribute("data-branch");

        if (!modJson[targetGameVersionElement.value]) {
          modJson[targetGameVersionElement.value] = [];
        }

        const funding = modFundingLinkElement.value.trim();

        let mod: Mod = getStandardizedMod(
          {
            name: modNameElement.value.trim(),
            description: modDescriptionElement.value.trim(),
            id: modIdElement.value.trim(),
            version: modVersionElement.value.trim(),
            author: modCreatorsElement.value.trim(),
            authorIcon: authorIconElement.value.trim(),
            modloader: Object.keys(ModLoader).includes(
              modLoaderElement.value.trim()
            )
              ? (modLoaderElement.value.trim() as ModLoader)
              : ModLoader.QuestLoader,
            download: modDownloadLinkElement.value.trim(),
            source: modSourceLinkElement.value.trim(),
            cover: modCoverElement.value.trim(),
            funding: isNullOrWhitespace(funding) ? [] : [funding],
            website: modWebsiteLinkElement.value.trim(),
          },
          splitModKeys
        );

        validateMod(mod);

        const modFilename = getFilename(
          mod.id || "",
          mod.version || "",
          targetGameVersionElement.value
        );

        if (
          checkMod(
            mod.id || "",
            mod.version || "",
            targetGameVersionElement.value
          )
        ) {
          alert("This mod version already exists in the json");
          window.open(
            `https://github.com/${repo}/edit/${branch}/${modFilename}`
          );
        } else {
          window.open(
            `https://github.com/${repo}/new/${branch}?filename=${encodeURIComponent(modFilename)}&value=${encodeURIComponent(`${JSON.stringify(mod, null, "  ")}\n`)}`
          );
        }
      } catch (err) {
        console.error(err);
        alert(`${err.message || err}`);
      }
    }

    /**
     * Function to handle dropping of URLs on a text input.
     * @param e - The event object.
     */
    function urlDropHandler(this: HTMLInputElement, e: DragEvent): void {
      e.preventDefault();
      e.stopPropagation();

      if (!e.dataTransfer || !e.currentTarget) {
        return;
      }

      /**
       * @type {HTMLInputElement}
       */
      const input = e.currentTarget as HTMLInputElement;
      const url = e.dataTransfer.getData("URL");

      input.value = url;
      input.dispatchEvent(new Event("change"));
    }

    /**
     * Function to handle loading of QMOD files.
     * @param ev - The event object.
     */
    async function qmodLoadHandler(
      this: FileReader,
      ev: ProgressEvent<FileReader>
    ) {
      const reader = this;

      if (reader.result) {
        try {
          const zip = await JSZip.loadAsync(reader.result);
          const modFile = zip.file("mod.json");

          if (!modFile) {
            console.error("No mod.json");
            return;
          }

          const modInfo: QmodInfo = JSON.parse(await modFile.async("string"));

          modNameElement.value = modInfo.name || "";
          modDescriptionElement.value = modInfo.description || "";
          modIdElement.value = modInfo.id || "";
          modVersionElement.value = modInfo.version || "";
          modCreatorsElement.value =
            (!modInfo.porter ? "" : modInfo.porter + ",") + modInfo.author;
          targetGameVersionElement.value = modInfo.packageVersion || "";
          modLoaderElement.value = modInfo.modloader ?? "QuestLoader";
          modFundingLinkElement.value = "";
          modWebsiteLinkElement.value = "";

          console.log(modInfo);
        } catch (error) {
          console.error("Error loading QMOD file:", error);
        }
      }
    }

    /**
     * Function to handle drag/drop of qmod files on the drop zone.
     * @param e
     */
    function qmodDropHandler(this: HTMLElement, e: DragEvent) {
      e.preventDefault();
      e.stopPropagation();

      if (!e.dataTransfer) {
        return;
      }

      const files = e.dataTransfer.items
        ? [...e.dataTransfer.items]
            .filter((item) => item.kind === "file")
            .map((item) => item.getAsFile())
        : [...e.dataTransfer.files];

      for (const file of files) {
        readQmodFile(file);
      }
    }

    /**
     * Fills in the source code text input if the link is from GitHub.
     * @param e
     */
    async function modDownloadLinkChangeHandler(
      this: HTMLInputElement,
      e: Event
    ) {
      const match = ghRegex.exec(modDownloadLinkElement.value.trim());

      if (match) {
        modSourceLinkElement.value = `https://github.com/${match[1]}/${match[2]}/`;
        modWebsiteLinkElement.value = `https://github.com/${match[1]}/${match[2]}/`;
        authorIconElement.value = (await getGithubIconUrl(match[0])).data || "";
        modCoverElement.value = (await getQmodCoverUrl(match[0])).data || "";
      }
    }

    // Prevent default behavior for dragover event
    qmodDropZoneElement.addEventListener(
      "dragover",
      (e) => e.preventDefault(),
      false
    );

    // Event listener for dropping files into the qmodDropZone
    qmodDropZoneElement.addEventListener("drop", qmodDropHandler);

    // Event listener for clicking the QMOD button
    loadQmodElement.addEventListener("click", loadQmod);

    // Event listener for onchange event of link input
    modDownloadLinkElement.addEventListener(
      "change",
      modDownloadLinkChangeHandler
    );

    // Add url drop handlers to the following
    for (const element of [
      modDownloadLinkElement,
      modSourceLinkElement,
      modWebsiteLinkElement,
      modFundingLinkElement,
      modCoverElement,
    ]) {
      element.addEventListener("drop", urlDropHandler);
    }

    // Event listener for generate button click event
    generateButtonElement.addEventListener("click", generateJson);
  })().catch((error) => {
    console.error(error);

    alert(
      "An error has occurred during initialization, please see the console for more information."
    );
  });
</script>
